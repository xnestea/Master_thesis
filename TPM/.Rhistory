source('~/Master/Scripts/TPM/DE_model_TCGA.R', echo=TRUE)
setwd("Master/bin/")
library(SummarizedExperiment)
library(NMF)
library(biomaRt)
load("../../Data/TCGA data/uni_transcript_counts_exp_clinical_add1.Rdata")
ensembl <- useMart("ensembl", dataset="hsapiens_gene_ensembl")
### for all ensemble genes in dataframe add information about transcript biotype and gene symbol
map_gene = getBM(attributes=c('ensembl_transcript_id','ensembl_gene_id',"transcript_biotype",'external_gene_name'),
filters = 'ensembl_transcript_id', values=rownames(exp), mart=ensembl)
### select only protein coding.
#save_mp <- map_gene
#map_gene <- save_mp
map_gene = map_gene[which(map_gene$transcript_biotype=="protein_coding"),]
### change name of column
colnames(map_gene)[colnames(map_gene)=="external_gene_name"] <- "Gene"
### set correct rownames
rownames(map_gene) <- map_gene[,1]
### remove redundand columns
map_gene[,c(1:3)] <- NULL
### change ensembl to gene symbol
exp2<- exp[which(rownames(exp) %in% test),]
#save_exp <- exp
#exp <- save_exp
test = save_exp[which(save_exp$Gene == "A1BG"),]
exp <- merge(exp, map_gene, by= "row.names", all.x=TRUE)
exp <- exp[!is.na(exp$Gene),]
exp[,c("Row.names")] <- NULL
exp <- aggregate(.~Gene, exp, sum)
row.names(exp) <- exp$Gene
exp[,1] <- NULL
exp_save <- exp
exp <- exp_save
### change ensembl to gene symbol
df<- as.data.frame(ensem_of_symbol_exp)
### change ensembl to gene symbol
exp <- merge(exp, df, by.x = "row.names", by.y= "ensemble", all.x=TRUE)
exp <- exp[!is.na(exp$symbol),]
exp <- exp[!duplicated(exp$symbol),]
row.names(exp) <- exp$symbol
exp[,c("symbol","Row.names")] <- NULL
### change ensembl to gene symbol
#save_exp <- exp
#exp <- save_exp
exp <- merge(exp, map_gene, by= "row.names", all.x=TRUE)
load("../../Data/TCGA data/uni_transcript_counts_exp_clinical_add1.Rdata")
load("../../Data/Japanese data/exp_counts_gene_level_round.Rdata")
exp <- merge(exp, map_gene, by= "row.names", all.x=TRUE)
save_exp <- exp
exp <- exp[!is.na(exp$Gene),]
exp[,c("Row.names")] <- NULL
### sum transcripts expression for each gene
exp <- aggregate(.~Gene, exp, sum)
head(exp)
View(exp)
save(map_gene, file = "../../bin/TPM/map_gene.Rdata")
load("../../bin/TPM/model_TCGA.Rdata")
load("../../Data/TCGA data/uni_transcript_counts_exp_clinical_add1.Rdata")
head(exp)
load("../../bin/TPM/map_gene.Rdata")
save_exp <- exp
#save(map_gene, file = "../../bin/TPM/map_gene.Rdata")
#test = save_exp[which(save_exp$Gene == "A1BG"),]
#exp2<- exp[which(rownames(exp) %in% test),]
### change ensembl to gene symbol
exp <- merge(exp, map_gene, by= "row.names", all.x=TRUE)
save_exp <- exp
test = save_exp[which(save_exp$Gene == "A1BG"),]
test
exp <- exp[!is.na(exp$Gene),]
exp[,c("Row.names")] <- NULL
### sum transcripts expression for each gene
exp <- aggregate(.~Gene, exp, sum)
row.names(exp) <- exp$Gene
exp[,1] <- NULL
View(exp)
df<- as.data.frame(ensem_of_symbol_exp)
load("../../bin/TPM/model_TCGA.Rdata")
#save_exp <- exp
#exp <- save_exp
### retrieve clusters
groups <- as.data.frame(predict(model, what = "samples"))
View(groups)
colnames(groups) <- "cluster"
groups <- groups[order(match(row.names(groups), colnames(exp))),1, drop=FALSE]
View(groups)
deseq <- DESeqDataSetFromMatrix(countData=exp, colData=groups, design = ~cluster)
library(DESeq2)
deseq <- DESeqDataSetFromMatrix(countData=exp, colData=groups, design = ~cluster)
View(save_exp)
exp <- save_exp
head(exp)
setwd("Master/bin/")
library(biomaRt)
load("../../Data/TCGA data/uni_transcript_counts_exp_clinical_add1.Rdata")
setwd("Master/bin/")
library(biomaRt)
library(DESeq2)
load("../../bin/TPM/map_gene.Rdata")
load("../../bin/TPM/model_TCGA.Rdata")
load("../../Data/TCGA data/uni_transcript_counts_exp_clinical_add1.Rdata")
### change ensembl to gene symbol
head(exp)
load("../../Data/TCGA data/uni_transcript_tpm_exp_clinical_add1.Rdata")
head(exp)
setwd("Master/bin/")
library(biomaRt)
library(DESeq2)
load("../../bin/TPM/map_gene.Rdata")
load("../../bin/TPM/model_TCGA.Rdata")
load("../../Data/TCGA data/uni_transcript_counts_exp_clinical_add1.Rdata")
### set gene names as rownames
exp <- merge(exp, map_gene, by= "row.names", all.x=TRUE)
exp <- exp[!is.na(exp$Gene),]
exp[,c("Row.names")] <- NULL
### sum transcripts expression for each gene
save_exp <- exp
exp <- aggregate(.~Gene, exp, sum)
row.names(exp) <- exp$Gene
exp[,1] <- NULL
#save_exp2 <- exp
#exp <- save_exp
### retrieve clusters
groups <- as.data.frame(predict(model, what = "samples"))
save_exp2 <- exp
groups <- as.data.frame(predict(model, what = "samples"))
colnames(groups) <- "cluster"
groups <- groups[order(match(row.names(groups), colnames(exp))),1, drop=FALSE]
deseq <- DESeqDataSetFromMatrix(countData=exp, colData=groups, design = ~cluster)
mat <- as.matrix(exp)
View(mat)
exp2 <- lapply(exp, as.numeric)
View(exp2)
exp2 <- lapply(exp, as.integer)
View(exp2)
exp2[] <- lapply(exp, as.integer)
exp2 <- as.data.frame(exp2)
View(exp2)
exp2 <- sapply(exp, as.integer)
View(exp2)
exp
exp2 <- sapply(exp, as.integer)
exp2 <- as.data.frame(exp2)
exp2
exp2[] <- sapply(exp, as.integer)
View(exp)
head(exp2)
exp[] <- sapply(exp, as.integer)
deseq <- DESeqDataSetFromMatrix(countData=exp, colData=groups, design = ~cluster)
deseq <- DESeq(deseq)
